#lang racket

;;; Setup

; Load in the students file
(define students (call-with-input-file "students.rkt" read))


;;; Main procedures, main procedures to solve the tasks.

; Create groups with group sizes defined in form using a provided soring function
(define (group-students sl gsl pred)
  (cond 
    [(list? gsl) (run-list-pred sl gsl pred)]
    [else (pred sl gsl 1)])
  )


;; Main task predicates

; TODO write comment
(define (random-grouping sl gsl start)
  (let [(shuffled (shuffle sl))]
    (if (null? gsl)
    '()
    (append 
      (create-group-by-lenght shuffled (car gsl) start) 
      (random-grouping (list-tail shuffled (car gsl)) (cdr gsl) (+ start 1))
    ))))

; TODO write comment
(define (counting-grouping sl k start)
  (if (or (null? sl) (equal? k 0))
    '()
    (append (create-groups-by-count sl k start) (counting-grouping (my-list-tail sl k) k start))))

; TODO write comment
(define (balanced-grouping sl k start)
  (let [(f-male (get-all-foreign-male sl))
        (f-female (get-all-foreign-female sl))
        (d-male (get-all-danish-male sl))
        (d-female (get-all-danish-female sl))]
    (counting-grouping (append d-male f-female f-male d-female) k start)))

; TODO write comment
(define (predicate-random-grouping predicate)
  (lambda(sl gsl start)
    (generate-until-match sl gsl start predicate 1000)))

(define (generate-until-match sl gsl start pred timeout)
  (let [(grouping (random-grouping sl gsl start))]
    (cond 
      [(check-grouping grouping pred sl) grouping]
      [(= timeout 0) '"No group could be made using that predicate"]
      [else (generate-until-match sl gsl start pred (- timeout 1))])))

;; predicate grouping predicates

(define n-students-of-age
  (lambda(age n)
    (lambda(group)
      (let [(result (group-checker group (student-above-age age)))]
        (>= (length (filter true? result)) n)))))


;;; Helping procedures used to solve bigger problems

; Get the some of integers in a list
(define (sum L)
  (apply + L))

; Helper procedure to get the max group size
(define (get-max lst max id)
  (let ((size (get-group-size lst id)))
    (cond
      [(= size 0) max]
      [(> size max) (get-max lst size (+ id 1))]
      [else (get-max lst max (+ id 1))])))

; Get the size of a group
(define (get-group-size lst id)
  (length(get-group-by-id lst id)))

; Helper procedure to get the smallest group size
(define (get-min lst min id)
  (let ((size (get-group-size lst id)))
    (cond
      [(= size 0) min]
      [(< size min) (get-min lst size (+ id 1))]
      [else (get-min lst min (+ id 1))])))

; TODO write comment
(define (run-list-pred sl gsl pred)
  (if (equal? (length sl) (sum gsl))
      (pred sl gsl 1)
      '"Group formation dont match up with the number of students"))

; TODO write comment
(define (create-group-by-lenght sl size id)
  (if (= size 0)
    '()
    (cons (assign-group (car sl) id) (create-group-by-lenght (cdr sl) (- size 1) id))))

; TODO write comment
(define (assign-group student id)
  (cons id (car student)))

; TODO write comment
(define (create-groups-by-count sl k group)
  (if (or (> group k) (null? sl))
    '()
    (cons (assign-group (car sl) group) (create-groups-by-count (cdr sl) k (+ group 1)))))

; TODO write comment
(define (my-list-tail lst n)
  (cond 
    [(= n 0) lst]
    [(> n (length lst)) '()]
    [else (my-list-tail (cdr lst) (- n 1))]))

; TODO write comment
(define (get-all-foreign-male sl)
  (get-all-male (get-all-foreigners sl)))

; TODO write comment
(define (get-all-danish-male sl)
  (get-all-male (get-all-danish sl)))

; TODO write comment
(define (get-all-foreign-female sl)
  (get-all-female (get-all-foreigners sl)))

; TODO write comment
(define (get-all-danish-female sl)
  (get-all-female (get-all-danish sl)))

; TODO write comment
(define (get-all-foreigners sl)
  (filter (match-student-index-not-pred 3 "Danish") sl))

; TODO write comment
(define (get-all-danish sl)
  (filter (match-student-index-pred 3 "Danish") sl))

; TODO write comment
(define (get-all-female sl)
  (filter (match-student-index-pred 2 "female") sl))

; TODO write comment
(define (get-all-male sl)
  (filter (match-student-index-pred 2 "male") sl))

; TODO write comment
(define (check-grouping groups pred sl)
  (check-grouping-helper groups pred sl (get-group-amount groups))) 

(define (check-grouping-helper groups pred sl groupid)
  (if (= groupid 0)
    #t
    (if (pred (get-group-students-by-id (get-group-by-id groups groupid) sl))
      (check-grouping-helper groups pred sl (- groupid 1))
      #f)))

; TODO write comment
(define (group-checker group pred)
  (check-group-for-pred group pred '()))

;TODO write comment
(define (check-group-for-pred group pred result)
  (if (null? group)
    result
    (check-group-for-pred (cdr group) pred (cons (pred (car group)) result))))


;;; Student procedures

(define (get-group-students-by-id group students)
  (if (null? group)
    '()
    (cons (get-student-by-id (cdar group) students) (get-group-students-by-id (cdr group) students))))

(define (get-student-by-id id students)
  (car (filter (match-student-index-pred 0 id) students)))

; TODO write comment
(define (get-student-age student)
  (list-ref student 4))

; TODO write comment
(define student-above-age
  (lambda(age)
    (lambda(student)
      (>= (get-student-age student) age))))

;;; Group procedures

; Get a group by its id
(define (get-group-by-id lst id)
  (filter (match-group-id-pred id) lst))

; Get the number of groups in a grouping
(define (get-group-amount lst)
  (car(last(sort lst sort-by-group-id))))

; Get the largest group size in a grouping
(define (get-max-group-size lst)
  (get-max lst 0 1))

; Get the smallest group size in a grouping
(define (get-min-group-size lst)
  (get-min lst (length students) 1))


;;; Predicate procedures

; predicate to match group id
(define match-group-id-pred
  (lambda(id)
    (lambda(x)
      (equal? (car x) id))))

; Sort group by id predicatate
(define (sort-by-group-id x y)
  (< (car x) (car y)))

; TODO write comment
(define match-student-index-pred
  (lambda(index matches)
    (match-pred index matches string=?)))

; TODO write comment
(define string!=?
  (lambda(x y)
    (not (string=? x y))))

; TODO write comment    
(define match-student-index-not-pred 
  (lambda(index matches)
    (match-pred index matches string!=?)))

; TODO write comment
(define match-pred
  (lambda(index matches matcher) ; the prop we want to look at, and what we want it to be
    (lambda(student) ; the student we want to check on, given by filter
      (matcher (list-ref student index) matches))))

; TODO write comment
(define true?
  (lambda(x)
    (equal? x #t)))


;;; Main



(define stu (list 
  '("20204988" "Adam Carl Hjorth" "male" "Syrian" 26)
  '("20204882" "Adam Justesen" "male" "Syrian" 26)
  '("20209775" "Adam Marius Holst" "male" "Danish" 26)
  '("20207662" "Adam Nohr Brodersen" "male" "Danish" 26)
  '("20202610" "Agnes Johnsen" "male" "Danish" 26)
  '("20207159" "Ahmed Ghufran" "female" "Syrian" 26)
  '("20205976" "Aksel Bundgaard" "female" "Syrian" 26)
  '("20201188" "Aksel Hedegaard" "female" "Syrian" 26)
  '("20201654" "Aksel Ibsen" "female" "Danish" 24)
  '("20202858" "Aksel Matthias Jacobsen" "female" "Danish" 24)
 ))

; (get-student-by-id '"20204988" stu)

;(get-group-students-by-id '((1 . "20204988") (1 . "20204882")) stu)


;(get-group-amount (group-students stu '(2 2 2 2 2) random-grouping))
; (group-students stu 2 counting-grouping)
; (group-students stu 2 balanced-grouping)

;((n-studens-of-age 15 1) stu)


;(evaluate-check (group-checker stu (student-above-age 25)))

;(check-grouping stu (n-students-of-age 25 2))

(group-students stu '(5 5) (predicate-random-grouping (n-students-of-age 20 2)))
